Overview [#overview]
********************
'Duvet' is a [BedSheet]`pod:afBedSheet` library that delivers Javascript to the browser.

'Duvet' provides a wrapper around [RequireJS]`http://requirejs.org/` and packages up Fantom generated Javascript code.
It gives you clean dependency management for Javascript libraries and a means to execute Fantom code in the web browser!


Why Duvet? [#why]
=================
Embracing RequireJs and AMD modules is like having an IoC for Javascript; and using it gives you a warm, fuzzy feeling all over!



Install [#install]
******************
Install '@{project.name}' with the Fantom Repository Manager ( [fanr]`docFanr::Tool.install` ):

  C:\> fanr install -r http://repo.status302.com/fanr/ @{pod.name}

To use in a [Fantom]`http://fantom.org/` project, add a dependency to 'build.fan':

  depends = ["sys 1.0", ..., "@{pod.name} @{pod.version}"]



Documentation [#documentation]
******************************
Full API & fandocs are available on the [Status302 repository]`http://repo.status302.com/doc/@{pod.name}/`.



Quick Start [#quickStart]
*************************
1. Create a text file called 'Example.fan'

    syntax: fantom

    using afIoc
    using afBedSheet
    using afDuvet

    class Example {
        @Inject HtmlInjector? injector

        Text duvetExample() {
            // inject meta tags and stylesheets into your HTML
            injector.injectMeta.withName("author").withContent("Fantom-Factory")

            // inject a RequireJS script snippet
            // this ensures all dependencies are loaded before execution
            injector.injectRequireScript(["jquery":"\$"],
                "alert('jQuery v' + \$().jquery);"
            )

            // let Duvet inject all it needs into a plain HTML shell
            return Text.fromHtml(
                "<html><head></head><body><h1>Duvet by Alien-Factory</h1></body></html>"
            )
        }
    }

    @SubModule { modules=[DuvetModule#] }
    class AppModule {
        @Contribute { serviceType=Routes# }
        static Void contributeRoutes(Configuration conf) {
            conf.add(Route(`/`, Example#duvetExample))
        }

        @Contribute { serviceType=ScriptModules# }
        static Void contributeScriptModules(Configuration config) {
            // configure any non-standard AMD modules
            config.add(
                ScriptModule("jquery").atUrl(`//code.jquery.com/jquery-2.1.1.min.js`)
            )
        }
    }

    class Main {
        Int main() {
            afBedSheet::Main().main([AppModule#.qname, "8080"])
        }
    }

2. Run 'Example.fan' as a Fantom script from the command line. This starts the [BedSheet]`pod:afBedSheet` app server:

    C:\> fan Example.fan
       ___    __                 _____        _
      / _ |  / /_____  _____    / ___/__  ___/ /_________  __ __
     / _  | / // / -_|/ _  /===/ __// _ \/ _/ __/ _  / __|/ // /
    /_/ |_|/_//_/\__|/_//_/   /_/   \_,_/__/\__/____/_/   \_, /
               Alien-Factory BedSheet v1.4.8, IoC v2.0.6 /___/

    IoC Registry built in 612ms and started up in 104ms

    Bed App 'Unknown' listening on http://localhost:8080/

3. Visit 'http://localhost:8080/'

  ![Duvet Example - Screenshot]`http://static.alienfactory.co.uk/fantom-docs/afDuvet.exampleScreenshot.png`



HTML Injection [#htmlInjection]
*******************************
It is good practice to componentise your web pages (something that [efanXtra]`pod:afEfanXtra` excels at).

Taking a blog website as an example, some pages show comments and others don't. If comments were encapsulated in a *CommentComponent* it would only need to be rendered on those pages that need it. And like any fully featured component it requires its own stylesheet and some javascript. But these files shouldn't be downloaded on *every* page, just the pages that render the *CommentComponent*.
The *CommentComponent* itself should be responsible for referencing its support files.

 *Q). But how does the CommentComponent, which is typically rendered at the bottom of a web page, specify what stylesheets should be downloaded in the '<head>' section?*

 ** *A). Duvet Html Injection.* **

The `HtmlInjector` service lets you inject meta, scripts and stylesheets into your HTML, at any time before the page is sent to the client. The HTML tags are injected into either the bottom of the HEAD or the BODY section.

But what if the *CommentComponent* is rendered more than once on a single page? You don't want multiple copies of the same stylesheet downloaded on the same page!?

No fear, 'HtmlInjector' silently rejects all stylesheet and script requests for the same URL.

'HtmlInjector' works by wrapping BedSheet's 'TextResponseProcessor'. All requests for injection are queued up and then, just before the page is streamed to the browser, the HTML tags are injected.



RequireJS Usage [#requireJs]
****************************
Looking after countless Javascript libraries, ensuring they all get loaded quickly and in the correct order can be a pain.
[RequireJS]`http://requirejs.org/`, an asynchronous module loader for Javascript, not only eases that pain;
but gives you proper dependency management for your libraries.

*It's how Javascript should be written!*



Javascript Modules [#javascriptModules]
=======================================
RequireJS requires Javascript to be packaged up into module files. A lot of popular Javascript libraries, including jQuery, already conform to this standard.

All Javascript module files need to be served from the same [baseUrl]`afDuvet::DuvetConfigIds.baseModuleUrl` which defaults to '`/modules/`', so configure BedSheet's 'FileHandler' to serve these files:

pre>
syntax: fantom

@Contribute { serviceType=FileHandler# }
static Void contributeFileHandler(Configuration config) {
    config[`/modules/`] = `etc/web-static/modules/`
}
<pre

Javascript module files should have the same name as the module. So, using the directory above, to define jQuery as a module it would should be saved as:

  etc/web-static/modules/jQuery.js

'HtmlInjector.injectRequireScript()' may now be used to inject and run small scripts:

pre>
syntax: fantom
htmlInjector.injectRequireScript( ["jQuery" : "jq"],
    "alert('jQuery v' + jq().jquery);"
)
<pre

All injected scripts are wrapped up in a 'require()' function call to ensure proper dependency management.

If a module is to be downloaded from a differnt URL, like a CDN as used in the Quick Start example, then it may be defined in the 'AppModule' by contributing to the 'ScriptModules' service.

To write your own module, create a Javascript file and save it in the 'modules/' directory. All modules should start with a standard definition function, see the [RequireJS API]`http://requirejs.org/docs/api.html#defdep` for details. It is common for modules to return a object, which is akin to exposing a mini-API.

An example 'modules/MyModule.js' file:

pre>
syntax: javascript

define(["jquery"], function($) {
    return {
        doStuff: function() {
            alert("Doing stuff with jQuery v" + $().jquery);
        },
        doOtherStuff: function(stuff) {
            alert("Doing " + stuff);
        }
    }
});
<pre

We could then invoke the exposed methods on the module with 'HtmlInjector.injectRequireModule(...)'.

pre>
syntax: fantom
htmlInjector.injectRequireModule("myModule", "doStuff")

htmlInjector.injectRequireModule("myModule", "doOtherStuff", ["Emma!"])
<pre



Fantom Pod Modules [#fantomModules]
===================================
Duvet lets Fantom code be run directly in the browser by converting pod .js files into RequireJS modules.

Fantom compiles all classes in a pod annotated with the '@Js' facet into a Javascript file that is saved in the pod.
These javascript pod files can then be served up with BedSheet's 'PodHandler' service.

Duvet builds a dependency tree of pods with Javascript files and converts them into RequireJS modules of the same name.
For example, the Fantom 'sys' pod is converted into a RequireJS module called 'sys'.

From there it is a small step to require the Fantom modules and execute Fantom code in the browser. Simply call 'HtmlInjector.injectFantomMethod(...)'.



Using the DOM Pod [#domPod]
---------------------------
The Fantom [dom]`pod:dom` pod is used to interact with the browser's Window, Document and DOM objects.
For example, the following code fires up a browser alert - note the '@Js' annotation on the class.

pre>
syntax: fantom

using dom

@Js
class DomExample {
    Void info() {
        Win.cur.alert("Chew Bubblegum!")
    }
}
<pre

To execute the above code, inject it into a web page with the following:

  htmlInjector.injectFantomMethod(DomExample#info)



Using the FWT Pod [#fwtPod]
---------------------------
Fantom's [fwt]`pod:fwt` and [webfwt]`pod:webfwt` pods can be used to generate fully featured FWT windows and graphics in the browser. Example:

pre>
syntax: fantom

using fwt

@Js
class FwtExample {
    Void info() {
        Window {
            Label { text = "Chew Bubblegum!"; halign = Halign.center },
        }.open
    }
}
<pre

Again, this can be executed with:

  htmlInjector.injectFantomMethod(FwtExample#info)

Note that when you instantiate an FWT window, it attaches itself to the whole browser window by default.
If you wish to constrain the window to a particular element on the page, pass in the following environment variable:

   "fwt.window.root" : "<element-id>"

Where '<element-id>' is the html ID of an element on the page.

Note that the element needs to specify a width, height and give a CSS 'position' of 'relative'.
This may either be done in CSS or defined on the element directly:

  syntax: html

  <div id="fwt-window" style="width: 640px; height:480px; position:relative;"></div>



Disabling Pods [#disablePods]
-----------------------------
If you want to restrict access to Fantom generated Javascript, or just don't like Fantom modules cluttering up the RequireJS shim, then pods can be easily disabled. Simply remove the 'afDuvet.podModules' configuration from the 'ScriptModules' service:

  Contribute { serviceType=ScriptModules# }
  static Void contributeScriptModules(Configuration config) {
      config.remove("afDuvet.podModules")
  }



Module Config [#moduleConfig]
=============================
Not all popular Javascript libraries are AMD modules, unfortunately, so these require a little configuration to get working.
Configuration is done by contributing `ScriptModule` instances.

All 'ScriptModule' data map to the RequireJS [path]`http://requirejs.org/docs/api.html#config-paths` and [shim]`http://requirejs.org/docs/api.html#config-shim` config options.

Here's a working example from the Fantom-Factory website:

pre>
syntax: fantom

@Contribute { serviceType=ScriptModules# }
static Void contributeScriptModules(Configuration config) {
    config.add(
        ScriptModule("jquery")
            .atUrl(`//code.jquery.com/jquery-2.1.1.min.js`)
            .fallbackToUrl(`/scripts/jquery-2.1.1.min.js`)
    )
    config.add(
        ScriptModule("bootstrap")
            .atUrl(`/scripts/bootstrap.min.js`)
            .requires("jquery")
    )
}
<pre



Non-RequireJS Usage
*******************
Sometimes an old skool approach is preferred / is more convenient when

For this you don't actually need Duvet at all - here is some example HTML that only relies on BedSheet's 'PodHandler' service:

 <script type='text/javascript' src='/pod/sys/sys.js'></script>
<script type='text/javascript' src='/pod/concurrent/concurrent.js'></script>
<script type='text/javascript' src='/pod/gfx/gfx.js'></script>
<script type='text/javascript' src='/pod/fwt/fwt.js'></script>
<script type='text/javascript' src='/pod/afUtils/afUtils.js'></script>


(cut n paste into BedSheet)



Pillow Example
**************



Release Notes [#releaseNotes]
*****************************
v1.0.6 [#v1.0.6]
================
 - Bug: Duvet no longers Errs when resolving pod JS file when run as a script. (Updated mainly for FormBean demo.)

v1.0.4 [#v1.0.4]
================
 - New: RequireJS modules are logged at startup.
 - New: RequireJS modules are printed on the BedSheet 404 and Error pages.
 - Chg: Recompiled to work with [BedSheet 1.4.0]`pod:afBedSheet`.

v1.0.2 [#v1.0.2]
================
 - Chg: Updated to [IoC 2.0.0]`pod:afIoc`.

v1.0.0 [#v1.0.0]
================
 - New: 'RequireJsConfigTweaks' service allows last minute tweaks to the RequireJS config.
 - Bug: Could not inject Fantom JS code from other pods if the main web app itself did not have JS code.

v0.1.0 [#v0.1.0]
================
 - New: Support for executing Fantom code on web pages! See 'HtmlInjector.injectFantomMethod()'.

v0.0.14 [#v0.0.14]
==================
 - Chg: Updated to [IoC 1.7.2]`pod:afIoc`.
 - Bug: Script 'async' attribute incorrectly had the value of 'true' (should have been 'async').

v0.0.12 [#v0.0.12]
==================
 - New: Added 'MetaTagBuilder.withProperty()' for adding [Open Graph]`http://ogp.me/` meta.

v0.0.10 [#v0.0.10]
==================
 - New: RequireJS script has cache control / expires headers that expire in 1 year.
 - Bug: Problems with contributing user modules.

v0.0.8 [#v0.0.8]
================
 - New: User defined modules in '`/modules/`' automatically have their asset caching strategy URLs added the RequireJS paths config.

v0.0.6 [#v0.0.6]
================
 - Chg: Renamed 'LinkTagBuilder.fromClientUrl()'   -> 'fromLocalUrl()' to match BedSheet 'FileHandler'.
 - Chg: Renamed 'ScriptTagBuilder.fromClientUrl()' -> 'fromLocalUrl()' to match BedSheet 'FileHandler'.

v0.0.4 [#v0.0.4]
================
 - New: Added 'DuvetMiddleware' to rollback / remove any HTML injections if an Err occurs. This prevents old code being injected into Err pages.
 - Bug: Could not inject multiple scripts without a src atrribute.

v0.0.2 [#v0.0.2]
================
 - New: Preview release.

